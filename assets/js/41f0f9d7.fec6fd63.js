"use strict";(self.webpackChunkgo_eagle_org_3=self.webpackChunkgo_eagle_org_3||[]).push([[1176],{5592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"component/cache","title":"\u7f13\u5b58\u7ec4\u4ef6","description":"Eagle \u4e00\u5957\u8f7b\u91cf\u7ea7 Go \u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5305\u542b\u5927\u91cf\u5fae\u670d\u52a1\u76f8\u5173\u6846\u67b6\u53ca\u5de5\u5177","source":"@site/docs/component/cache.md","sourceDirName":"component","slug":"/component/cache","permalink":"/docs/component/cache","draft":false,"unlisted":false,"editUrl":"https://github.com/go-eagle/go-eagle.org/edit/main/docs/component/cache.md","tags":[],"version":"current","frontMatter":{"id":"cache","title":"\u7f13\u5b58\u7ec4\u4ef6","description":"Eagle \u4e00\u5957\u8f7b\u91cf\u7ea7 Go \u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5305\u542b\u5927\u91cf\u5fae\u670d\u52a1\u76f8\u5173\u6846\u67b6\u53ca\u5de5\u5177","keywords":["Go","Eagle","Toolkit","Framework","Microservices","HTTP"],"slug":"/component/cache"},"sidebar":"docs","previous":{"title":"\u76d1\u63a7\u6307\u6807","permalink":"/docs/component/metrics"},"next":{"title":"\u5206\u5e03\u5f0f\u9501","permalink":"/docs/component/distributed-lock"}}');var c=t(4848),i=t(8453);const o={id:"cache",title:"\u7f13\u5b58\u7ec4\u4ef6",description:"Eagle \u4e00\u5957\u8f7b\u91cf\u7ea7 Go \u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5305\u542b\u5927\u91cf\u5fae\u670d\u52a1\u76f8\u5173\u6846\u67b6\u53ca\u5de5\u5177",keywords:["Go","Eagle","Toolkit","Framework","Microservices","HTTP"],slug:"/component/cache"},a=void 0,s={},l=[{value:"\u6982\u8981",id:"\u6982\u8981",level:2},{value:"\u672c\u5730\u7f13\u5b58\u4f7f\u7528",id:"\u672c\u5730\u7f13\u5b58\u4f7f\u7528",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:3},{value:"Example",id:"example",level:3},{value:"\u5206\u5e03\u5f0f\u7f13\u5b58\u4f7f\u7528",id:"\u5206\u5e03\u5f0f\u7f13\u5b58\u4f7f\u7528",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-1",level:3},{value:"Example",id:"example-1",level:3},{value:"\u5982\u4f55\u5728\u4e1a\u52a1\u4e2d\u4f7f\u7528",id:"\u5982\u4f55\u5728\u4e1a\u52a1\u4e2d\u4f7f\u7528",level:2},{value:"Reference",id:"reference",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,c.jsx)(n.p,{children:"\u7f13\u5b58\u7ec4\u4ef6\u7ec4\u8981\u5305\u62ec\u672c\u5730\u7f13\u5b58\u548c\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u4e24\u4e2a\u7ec4\u4ef6\u90fd\u5b9e\u73b0\u4ee5\u4e0b\u63a5\u53e3"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:"type Cache interface {\n  Set(ctx context.Context, key string, val interface{}, expiration time.Duration) error\n  Get(ctx context.Context, key string, val interface{}) error\n  MultiSet(ctx context.Context, valMap map[string]interface{}, expiration time.Duration) error\n  MultiGet(ctx context.Context, keys []string, valueMap interface{}) error\n  Del(ctx context.Context, keys ...string) error\n  SetCacheWithNotFound(ctx context.Context, key string) error\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"\u672c\u5730\u7f13\u5b58\u4f7f\u7528",children:"\u672c\u5730\u7f13\u5b58\u4f7f\u7528"}),"\n",(0,c.jsxs)(n.p,{children:["\u5185\u90e8\u4e3b\u8981\u4f7f\u7528 ",(0,c.jsx)(n.code,{children:"ristretto"})]}),"\n",(0,c.jsx)(n.h3,{id:"\u521d\u59cb\u5316",children:"\u521d\u59cb\u5316"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:"func NewMemoryCache(keyPrefix string, encoding encoding.Encoding) Cache {\n  config := &ristretto.Config{\n    NumCounters: 1e7,     // number of keys to track frequency of (10M).\n    MaxCost:     1 << 30, // maximum cost of cache (1GB).\n    BufferItems: 64,      // number of keys per Get buffer.\n  }\n  store, _ := ristretto.NewCache(config)\n  return &memoryCache{\n    client:    store,\n    KeyPrefix: keyPrefix,\n    encoding:  encoding,\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:'  store := NewMemoryCache("memory-unit-test", encoding.JSONEncoding{})\n  ctx := context.Background()\n  var gotVal string\n  store.Set(ctx, "test-get-key", "test", 3600)\n  store.Get(ctx, "test-get-key", &gotVal)\n'})}),"\n",(0,c.jsx)(n.h2,{id:"\u5206\u5e03\u5f0f\u7f13\u5b58\u4f7f\u7528",children:"\u5206\u5e03\u5f0f\u7f13\u5b58\u4f7f\u7528"}),"\n",(0,c.jsx)(n.p,{children:"\u5185\u90e8\u4e3b\u8981\u4f7f\u7528 redis"}),"\n",(0,c.jsx)(n.h3,{id:"\u521d\u59cb\u5316-1",children:"\u521d\u59cb\u5316"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:"func NewRedisCache(client *redis.Client, keyPrefix string, encoding encoding.Encoding, newObject func() interface{}) Cache {\n  return &redisCache{\n    client:    client,\n    KeyPrefix: keyPrefix,\n    encoding:  encoding,\n    newObject: newObject,\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:'  ...\n  // \u83b7\u53d6redis\u5ba2\u6237\u7aef\n  redisClient := redis.GetRedisClient()\n  // \u5b9e\u4f8b\u5316redis cache\n  // \u6307\u5b9a\u7f16\u7801\u683c\u5f0f\u4e3a json\n  cache := NewRedisCache(redisClient, "test-key", encoding.JSONEncoding{}, func() interface{} {\n    return new(int64)\n  })\n  ...\n'})}),"\n",(0,c.jsx)(n.h2,{id:"\u5982\u4f55\u5728\u4e1a\u52a1\u4e2d\u4f7f\u7528",children:"\u5982\u4f55\u5728\u4e1a\u52a1\u4e2d\u4f7f\u7528"}),"\n",(0,c.jsx)(n.p,{children:"\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6848\u4f8b\uff0c\u4ee3\u7801\u4f7f\u7528\u5de5\u5177\u751f\u6210"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# \u751f\u6210\u547d\u4ee4\neagle cache add UserCache\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-go",children:'package cache\n\n//go:generate mockgen -source=user_cache.go -destination=../../internal/mock/user_cache_mock.go  -package mock\n\nimport (\n  "context"\n  "fmt"\n  "time"\n\n  "github.com/spf13/cast"\n\n  "github.com/go-eagle/eagle/pkg/cache"\n  "github.com/go-eagle/eagle/pkg/encoding"\n  "github.com/go-eagle/eagle/pkg/log"\n  "github.com/go-redis/redis/v8"\n\n  "github.com/go-microservice/user-service/internal/model"\n)\n\nconst (\n  // PrefixUserCacheKey cache prefix\n  PrefixUserCacheKey = "user:%d"\n)\n\ntype UserCache interface {\n  SetUserCache(ctx context.Context, id int64, data *model.UserModel, duration time.Duration) error\n  GetUserCache(ctx context.Context, id int64) (ret *model.UserModel, err error)\n  MultiGetUserCache(ctx context.Context, ids []int64) (map[string]*model.UserModel, error)\n  MultiSetUserCache(ctx context.Context, data []*model.UserModel, duration time.Duration) error\n  DelUserCache(ctx context.Context, id int64) error\n  SetCacheWithNotFound(ctx context.Context, id int64) error\n}\n\n// userCache define a cache struct\ntype userCache struct {\n  cache cache.Cache\n}\n\n// NewUserCache new a cache\nfunc NewUserCache(rdb *redis.Client) UserCache {\n  jsonEncoding := encoding.JSONEncoding{}\n  cachePrefix := ""\n  return &userCache{\n    cache: cache.NewRedisCache(rdb, cachePrefix, jsonEncoding, func() interface{} {\n      return &model.UserModel{}\n    }),\n  }\n}\n\n// GetUserCacheKey get cache key\nfunc (c *userCache) GetUserCacheKey(id int64) string {\n  return fmt.Sprintf(PrefixUserCacheKey, id)\n}\n\n// SetUserCache write to cache\nfunc (c *userCache) SetUserCache(ctx context.Context, id int64, data *model.UserModel, duration time.Duration) error {\n  if data == nil || id == 0 {\n    return nil\n  }\n  cacheKey := c.GetUserCacheKey(id)\n  err := c.cache.Set(ctx, cacheKey, data, duration)\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\n// GetUserCache \u83b7\u53d6cache\nfunc (c *userCache) GetUserCache(ctx context.Context, id int64) (ret *model.UserModel, err error) {\n  var data *model.UserModel\n  cacheKey := c.GetUserCacheKey(id)\n  err = c.cache.Get(ctx, cacheKey, &data)\n  if err != nil {\n    log.WithContext(ctx).Warnf("get err from redis, err: %+v", err)\n    return nil, err\n  }\n  return data, nil\n  }\n\n// MultiGetUserCache \u6279\u91cf\u83b7\u53d6cache\nfunc (c *userCache) MultiGetUserCache(ctx context.Context, ids []int64) (map[string]*model.UserModel, error) {\n  var keys []string\n  for _, v := range ids {\n    cacheKey := c.GetUserCacheKey(v)\n    keys = append(keys, cacheKey)\n  }\n\n// NOTE: \u9700\u8981\u5728\u8fd9\u91ccmake\u5b9e\u4f8b\u5316\uff0c\u5982\u679c\u5728\u8fd4\u56de\u53c2\u6570\u91cc\u76f4\u63a5\u5b9a\u4e49\u4f1a\u62a5 nil map\nitemMap := make(map[string]*model.UserModel)\n  err := c.cache.MultiGet(ctx, keys, itemMap)\n  if err != nil {\n    return nil, err\n  }\n\n  retMap := make(map[string]*model.UserModel)\n  for _, v := range ids {\n    val, ok := itemMap[c.GetUserCacheKey(v)]\n    if ok {\n      retMap[cast.ToString(v)] = val\n    }\n  }\n  return retMap, nil\n}\n\n// MultiSetUserCache \u6279\u91cf\u8bbe\u7f6ecache\nfunc (c *userCache) MultiSetUserCache(ctx context.Context, data []*model.UserModel, duration time.Duration) error {\n  valMap := make(map[string]interface{})\n  for _, v := range data {\n    cacheKey := c.GetUserCacheKey(v.ID)\n    valMap[cacheKey] = v\n  }\n\n  err := c.cache.MultiSet(ctx, valMap, duration)\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\n// DelUserCache \u5220\u9664cache\nfunc (c *userCache) DelUserCache(ctx context.Context, id int64) error {\n  cacheKey := c.GetUserCacheKey(id)\n  err := c.cache.Del(ctx, cacheKey)\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\n// DelUserCache set empty cache\nfunc (c *userCache) SetCacheWithNotFound(ctx context.Context, id int64) error {\n  cacheKey := c.GetUserCacheKey(id)\n  err := c.cache.SetCacheWithNotFound(ctx, cacheKey)\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["\u6765\u6e90\uff1a ",(0,c.jsx)(n.a,{href:"https://github.com/go-microservice/user-service/blob/main/internal/cache/user_cache.go",children:"https://github.com/go-microservice/user-service/blob/main/internal/cache/user_cache.go"})]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://dgraph.io/blog/post/introducing-ristretto-high-perf-go-cache/",children:"https://dgraph.io/blog/post/introducing-ristretto-high-perf-go-cache/"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://www.start.io/blog/we-chose-ristretto-cache-for-go-heres-why/",children:"https://www.start.io/blog/we-chose-ristretto-cache-for-go-heres-why/"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const c={},i=r.createContext(c);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);